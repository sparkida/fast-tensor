/** generated by build-exports.mjs */
export interface WasmModule {
    HEAP8: Int8Array;
    HEAP16: Int16Array;
    HEAP32: Int32Array;
    HEAPU8: Uint8Array;
    HEAPU16: Uint16Array;
    HEAPU32: Uint32Array;
    HEAPF32: Float32Array;
    HEAPF64: Float64Array;
    default: (...args: unknown[]) => Promise<WasmModule>;
    _malloc: (size: number) => number;
    _free: (ptr: number) => void;
    _kalman_create: (q: number, r: number) => number;
    _kalman_delete: (kalmanPtr: number) => void;
    _kalman_reset: (kalmanPtr: number) => void;
    _kalman_update: (kalmanPtr: number, observationPtr: number, size: number, qTemp: number, rTemp: number) => void;
    _tensor_create: (rows: number, cols: number, is1d: boolean) => number;
    _tensor_clone: (tensorPtr: number) => number;
    _tensor_delete: (tensorPtr: number) => void;
    _tensor_batch_delete: (instancesPtr: number, size: number) => void;
    _tensor_get_shape: (tensorPtr: number, shapePtr: number) => void;
    _tensor_get_data_ptr: (tensorPtr: number) => number;
    _tensor_get_rows: (tensorPtr: number) => number;
    _tensor_get_cols: (tensorPtr: number) => number;
    _tensor_identity: (tensorPtr: number) => number;
    _tensor_pad: (tensorPtr: number, shapeWirePtr: number, constant: number, rpadBefore: number, rpadAfter: number, cpadBefore: number, cpadAfter: number) => number;
    _tensor_transpose: (tensorPtr: number) => number;
    _tensor_flatten: (tensorPtr: number) => number;
    _tensor_reshape: (tensorPtr: number, newRows: number, newCols: number, shapeWirePtr: number) => number;
    _tensor_stack: (instancesPtr: number, size: number) => number;
    _tensor_diag: (tensorPtr: number, shapeWirePtr: number) => number;
    _tensor_reverse: (tensorPtr: number, axis: number) => number;
    _tensor_add: (tensorPtr: number, inputPtr: number, size: number) => number;
    _tensor_sub: (tensorPtr: number, inputPtr: number, size: number) => number;
    _tensor_mul: (tensorPtr: number, inputPtr: number, size: number) => number;
    _tensor_div: (tensorPtr: number, inputPtr: number, size: number) => number;
    _tensor_square: (tensorPtr: number) => number;
    _tensor_mean: (tensorPtr: number, axis: number, keepdims: boolean, shapeWirePtr: number) => number;
    _tensor_norm: (tensorPtr: number, ord: number, axis: number, keepdims: boolean, shapeWirePtr: number) => number;
    _tensor_matmul: (tensorPtr: number, otherPtr: number, shapeWirePtr: number) => number;
    _tensor_get_bounds: (tensorPtr: number, boundsPtr: number) => void;
}
